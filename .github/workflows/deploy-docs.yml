# 工作流名称：用于在 GitHub Actions 界面标识此工作流的用途
name: Deploy Docs to GitHub Pages

# 触发条件：指定什么情况下运行此工作流
on:
  # 当代码推送到 master 分支时触发
  push:
    branches: [master]
    # 仅当以下路径的文件发生变更时触发（避免不必要的重复运行）
    paths:
      # 文档源文件变更
      - 'packages/docs/**'
      # 工作流文件本身变更
      - '.github/workflows/deploy-docs.yml'

  # 允许你从 Actions 选项卡手动运行此工作流程
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许同时进行一次部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: pages
  cancel-in-progress: false

# 工作流任务定义
jobs:
  # 任务名称：deploy（部署）
  deploy:
    # 运行环境：使用 Ubuntu 最新版
    runs-on: ubuntu-latest
    # 任务步骤：按顺序执行的操作列表
    steps:
      # 步骤1：检出代码到工作目录
      - uses: actions/checkout@v4
        with:
          # 拉取完整历史记录（某些构建工具需要）
          fetch-depth: 0

      # 步骤2：设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          # 指定 Node.js 版本
          node-version: 22.14.0

      # 步骤3：安装 pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          # 可指定 pnpm 版本，如不指定则使用最新版
          version: 10.11.0
          # 缓存 pnpm 依赖以加速构建
          cache: true

      # 步骤4：安装项目依赖
      - name: Install dependencies
        # 使用 pnpm 安装依赖
        run: pnpm install

      # 步骤5：构建文档（生成静态 HTML/CSS/JS 文件）
      - name: Build docs
        # 执行文档构建命令（对应 package.json 中的脚本）
        run: pnpm run docs:build

      # 步骤6：部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        # 使用第三方部署插件
        uses: peaceiris/actions-gh-pages@v4
        with:
          # 自动获取的 GitHub 认证令牌
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # 文档构建产物目录
          publish_dir: ./packages/docs/.vitepress/dist
          # 部署目标分支（GitHub Pages 专用分支）
          publish_branch: gh-pages
